#!/usr/bin/env python3

import os
import pathlib
import shutil
import subprocess
import sys


def main():
    assert len(sys.argv) > 1, "please select a target from 'install', 'uninstall'"
    target = sys.argv[1]
    cur_dir = pathlib.Path(__file__).absolute().parent
    blockchain_dir = cur_dir.parent.parent.parent.joinpath("blockchain")
    node_modules_dir = blockchain_dir.joinpath("node_modules")
    platform_json_src_dir = node_modules_dir.joinpath("singularitynet-platform-contracts")
    token_json_src_dir = node_modules_dir.joinpath("singularitynet-token-contracts")
    contract_json_dest_dir = cur_dir.parent.joinpath("snet", "snet_cli", "resources", "contracts")
    npm_location = shutil.which('npm')
    if not npm_location:
        raise Exception("This script requires 'npm' to be installed and in your PATH")

    if target == "install":
        shutil.rmtree(contract_json_dest_dir)

        subprocess.call([npm_location, "install"], cwd=blockchain_dir)

        os.makedirs(contract_json_dest_dir.joinpath("abi"), exist_ok=True)
        os.makedirs(contract_json_dest_dir.joinpath("networks"), exist_ok=True)

        abi_contract_names = ["Registry", "MultiPartyEscrow"]
        for contract_name in abi_contract_names:
            shutil.copy(
                platform_json_src_dir.joinpath("abi", f"{contract_name}.json"),
                contract_json_dest_dir.joinpath(
                    "abi", f"{contract_name}.json"
                ),
            )
        networks_contract_names = ["Registry", "MultiPartyEscrow"]

        for contract_name in networks_contract_names:
            shutil.copy(
                platform_json_src_dir.joinpath(
                    "networks", f"{contract_name}.json"
                ),
                contract_json_dest_dir.joinpath(
                    "networks", f"{contract_name}.json"
                ),
            )

        token_contract_name = "SingularityNetToken"
        shutil.copy(
            token_json_src_dir.joinpath("abi", f"{token_contract_name}.json"),
            contract_json_dest_dir.joinpath(
                "abi", f"{token_contract_name}.json"
            ),
        )
        shutil.copy(
            token_json_src_dir.joinpath(
                "networks", f"{token_contract_name}.json"
            ),
            contract_json_dest_dir.joinpath(
                "networks", f"{token_contract_name}.json"
            ),
        )
    elif target == "uninstall":
        try:
            shutil.rmtree(node_modules_dir)
            shutil.rmtree(contract_json_dest_dir.joinpath("abi"))
            shutil.rmtree(contract_json_dest_dir.joinpath("networks"))
        except FileNotFoundError:
            pass


if __name__ == "__main__":
    main()
